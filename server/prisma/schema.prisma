// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model Soldier {
  id         String       @id @unique
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  membership Membership[]
  Assignment Assignment[]
  Vacation   Vacation[]
}

model Unit {
  id          String       @id @unique
  name        String
  memberships Membership[]
}

model Membership {
  id        String  @id
  soldierId String
  unitId    String
  role      Role
  soldier   Soldier @relation(fields: [soldierId], references: [id])
  unit      Unit    @relation(fields: [unitId], references: [id])
}

model Position {
  id               String       @id @default(uuid())
  name             String
  createdAt        DateTime     @default(now())
  numberOfSoldiers Int
  updatedAt        DateTime     @updatedAt
  Assignment       Assignment[]
}

model Assignment {
  id         String   @id @default(uuid())
  positionId String
  unitId     String
  soldierId  String
  startDate  DateTime @default(now())
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  position   Position @relation(fields: [positionId], references: [id])
  soldier    Soldier  @relation(fields: [soldierId], references: [id])
}

model Vacation {
  id        String   @id @default(uuid())
  soldierId String
  startDate DateTime @default(now())
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  soldier   Soldier  @relation(fields: [soldierId], references: [id])
}
